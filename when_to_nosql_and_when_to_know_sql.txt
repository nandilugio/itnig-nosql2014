One interesting talk was the one given by Simon Elliston Ball: When to NoSQL and When to Know SQL. He went on not only through the typical review and classification of the NoSQL technologies available, but he leveraged their strengths and weakneses compared to good old SQL RDBMS. The results where not always those expected by some.

NoSQL databases are driven by different constraints than the ones that pushed SQL to the high reliability standards offered by ACID compliance. Instead, BASE (Basically Available, Soft state and Eventual consistency) compliance embraced my NoSQL allows compromises that make scalability and performance easier.

Nonetheless, on the days of Rapid Application Design, Machine Learning, Polyglot Persistence solutions for Big Data problems and other Social Internet driven sorcery, "non Facebook" scale enterprises ask themselves what they really need. Even though we're giving radically different uses to persistence than years ago, Big Data is not a problem everybody has. Frequently restructuring your model isn't everybody's case either, or not for all the model.

There is a growing need for more broader solutions that can cover nowadays OLTP needs that often offer aggregated data as a value to the user, and that serves as a base for the analyses needed to drive the business in the right direction at the right time. Both SQL and NoSQL are merging features and ideas from each other that could be used to address those needs without the complexities associated to maintaining different technologies running in conjunction. More words for the soup: NewSQL emerges from the mist... or cloud?

The fact is that many of the NoSQL solutions, before very specific by design, now incorporate hybrid designs that mix graph structures, documents, eventual consistency and other typical NoSQL features with more flexible query languages. Think about ArangoDB, GraphDB or the Aggregation Framework of MongoDB. Also the big SQL vendors are incorporating NoSQL ideas that can broaden their application, like PostgreSQL hstore or the many columnar stores like Vertica or Amazon Redshift, specifically engineered for fast aggregation.

Also, the different clients of the data in an organization need to access the data in different ways, imposing more challenges to the underlying persistence technology being used. More technologies bring different access paradigms on top of databases. Like ORMs let developers speak in object-oriented languages to RDBMS, projects like Apache Drill or Cloudera Impala implement SQL over HDFS and the like, enabling fast querying and ad-hoc analysis over grea amounts of data.

Much of these technologies where discussed in the conference. News like the upcomming release of the Redis Cluster first quarter of 2015 where also great to hear.
